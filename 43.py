# -*- coding:utf-8 -*-
class Solution:
    def LastRemaining_Solution(self, n, m):
        # write code here

'''
    参考剑指offer,纯手打
    定义一个关于m 和n的方程，f(n,m),表示n个数字0,1,2，….n-1;
    中每次删除第m个数字最后剩下的数字。
    第一个被删除的数字（m-1）%n.
    例如0,1,2,3,4,5，删除第3个，即2，那么（3-1）%6=0….2,商0余2，所以2就是那个被删除的数。
    在删除第m个数字(定义为k)之后的序列为
    0,1,2，…k-1,k+1,…n-1;
    在进入下一次循环时删除第m个的时候从第k+1个数开始，这个序列为k+1，，，n-1,0,1,…k-1;函数因此定为f*(n-1,m)
    再将这个映射我从0开始的序列，如下：

    K+1 → 0；
    K+2 → 1;
    …
    n-1 →  n-1-(k+1)=n-k-2;
    0   →  n-k-2+1=n-k-1;
    1   →  n-k;
    …

    k-1 → n-k-1+（k-1）=n-2;
    映射p(x)=p(x-k-1)%n;表示映射钱的数字是x,映射后的数字是x-k-1。逆映射为
    P*(x)=(x+k+1)%n.
    这里记住无论循环多少次删除第m个元素最后剩下的数字是一样的。
    有f*(n-1,m)=P*( f(n-1,m))=( f(n-1,m)+k+1)%n.=（f(n-1,m)+m）%n.
    因为k=(m-1)%n=(m-1)

'''
        if n==0 or m==0: return -1
        ret = 0 
        for i in range(2, n+1):
            ret = (ret+m)%i
        return ret
